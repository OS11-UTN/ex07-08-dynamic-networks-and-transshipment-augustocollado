import numpy as np
from scipy.optimize import linprog
from basic_utils import nn2na
import math

# parameters

# NN order: S, Sn, An, Bn, Tn, T

NN = np.array([
    [0,     1, 1, 1, 1, 1, 1,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0],
    
    [0,     0, 0, 0, 0, 0, 0,   0, 1, 0, 0, 0, 0,   0, 0, 0, 1, 0, 0,   0, 0, 0, 0, 0, 0,   0],
    [0,     0, 0, 0, 0, 0, 0,   0, 0, 1, 0, 0, 0,   0, 0, 0, 0, 1, 0,   0, 0, 0, 0, 0, 0,   0],
    [0,     0, 0, 0, 0, 0, 0,   0, 0, 0, 1, 0, 0,   0, 0, 0, 0, 0, 1,   0, 0, 0, 0, 0, 0,   0],
    [0,     0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 1, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0],
    [0,     0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 1,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0],
    [0,     0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0],
    
    [0,     0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0, 0, 1, 0, 0, 0,   0, 1, 0, 0, 0, 0,   0],
    [0,     0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 1, 0, 0,   0, 0, 1, 0, 0, 0,   0],
    [0,     0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 1, 0,   0, 0, 0, 1, 0, 0,   0],
    [0,     0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 1,   0, 0, 0, 0, 1, 0,   0],
    [0,     0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 1,   0],
    [0,     0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0],
    
    [0,     0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0, 1, 0, 0, 0, 0,   0],
    [0,     0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0, 0, 1, 0, 0, 0,   0],
    [0,     0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 1, 0, 0,   0],
    [0,     0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 1, 0,   0],
    [0,     0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 1,   0],
    [0,     0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0],
    
    [0,     0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   1],
    [0,     0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   1],
    [0,     0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   1],
    [0,     0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   1],
    [0,     0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   1],
    [0,     0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   1],
    
    [1,     0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0,   0],
])

arcs = np.array([
            'S-S1', 'S-S2', 'S-S3', 'S-S4', 'S-S5', 'S-S6',
            'S1-A2', 'S1-B4',
            'S2-A3', 'S2-B5',
            'S3-A4', 'S3-B6',
            'S4-A5',
            'S5-A6',
            'A1-B3', 'A1-T2', 
            'A2-B4', 'A2-T3', 
            'A3-B5', 'A3-T4', 
            'A4-B6', 'A4-T5', 
            'A5-T6',
            'B1-T2',
            'B2-T3',
            'B3-T4',
            'B4-T5',
            'B5-T6',
            'T1-T', 'T2-T', 'T3-T', 'T4-T', 'T5-T', 'T6-T',
            'T-S'
        ])

Capacity = np.array([
            math.inf, math.inf, math.inf, math.inf, math.inf, math.inf,
            5, 10,
            5, 10,
            5, 10,
            5, 10,
            3, 6,
            3, 6,
            3, 6,
            3, 6,
            3,
            3,
            3,
            3,
            3,
            3,
            math.inf, math.inf, math.inf, math.inf, math.inf, math.inf,
            math.inf
        ]) 
Cost = np.array([
            0, 0, 0, 0, 0, 0,
            0, 0, 
            0, 0, 
            0, 0, 
            0, 0, 
            0, 0, 
            0, 0, 
            0, 0, 
            0, 0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 0, 0, 0, 0, 0,
            -1
        ]) 

B = [
        0,
        0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0,
        0
    ]

# solution

Aeq = nn2na(NN)

Beq = np.array(B)

bounds = tuple( [ (0, Capacity[i]) for i in range (0, Aeq.shape[1]) ] )

result = linprog(Cost, A_eq = Aeq, b_eq = Beq, bounds=bounds, method='simplex' )

indexes = np.where(np.array(result.x) > 0.9)

print('Max flox/Min Cut: %s' % (result.fun * -1))

for i in indexes:
    print('%s: %s' % (arcs[i], result.x[i]))


